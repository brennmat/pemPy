#!/usr/bin/env python3

# Program to control and monitor isotope enrichment runs with PEM cells
#
# Setup: Raspberry Pi connected to...
# ... Voltcraft PPS power supply via USB cable (UART interface in PPS)
# ... HX711 load cell ADC to read PEM weight data from load cell
#
# This file is part of pemPy, a toolbox for operation of PEM electrolysis cells.
#
# pemPy is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# pemPy is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with ruediPy.  If not, see <http://www.gnu.org/licenses/>.
# 
# pemPy: a toolbox for operation of PEM electrolysis cells.
# Copyright 2019, Matthias Brennwald (brennmat@gmail.com)

# make shure Python knows where to look for the pemPy Python code
# http://stackoverflow.com/questions/4580101/python-add-pythonpath-during-command-line-module-run
# Example (bash): export PYTHONPATH=~/pemPy

# imports:
### import argparse
import datetime
import time
import configparser
import _thread
from termcolor import colored
import classes.powersupply_PPS
import RPi.GPIO as GPIO  # import GPIO
import classes.loadcell_HX711

global wait_ENTER_msg
wait_ENTER_msg = ''


###########################################
# thread function waiting for ENTER press #
###########################################
def wait_ENTER(b,msg):
    global wait_ENTER_msg
    wait_ENTER_msg = msg
    input()
    if wait_ENTER_msg:
        print(colored(wait_ENTER_msg+'\n','red'))
    b.append(None)



############################
# function to print output #
############################

def printit(text,f=''):
    # print date/time followed by text either to stdout (if f is empty) or to file (if f is not empty)

    # prepend date/time:
    now = datetime.datetime.now()
    text = now.strftime("%Y-%m-%d %H:%M:%S") + '\t' + text

    #print text:
    if f:
        print(text,file=f)
        f.flush()
    print(text)
    return


################
# main program #
################

### # parse input arguments
### parser = argparse.ArgumentParser(description='Control and monitor H isotope enrichment of water samples with PEM cells')
### parser.add_argument('samplename', help='name/label of sample')
### parser.add_argument('configfile', help='configuration file (name/path)')
### parser.add_argument('--logfile', nargs='?', default='pemcell.log', help='log file (name/path). Default: pemcell.log')
### args = parser.parse_args()

# read config file:
config = configparser.ConfigParser()
### config.read(args.configfile)
config.read('pemcell_config.txt')

# connect to PSU:
PSU = classes.powersupply_PPS.PPS(port=config['PEMCELLPSU']['COMPORT'], reset=False, prom=None)

# make sure PSU is turned off:
PSU.output(False)

# connect to load cell ("weight sensor"):
GPIO.setmode(GPIO.BCM)  # set GPIO pin mode to BCM numbering
loadcell_num_readings = int(config['LOADCELL']['READINGS_AVG'])
LOADCELL = classes.loadcell_HX711.HX711( dout_pin=5,
                                             pd_sck_pin=6,
                                             tempsens_serialport=config['LOADCELL']['TSENS_SERIALPORT'],
                                             TZero = config['LOADCELL']['TEMP_ZEROCOMP'],
                                             TRatio = 1.0
                                           )

# ask for sample name:
samplename = ''
while not samplename:
    samplename = input('Enter sample name / label: ')
    samplename = samplename.strip()

# start logfile:
logfilename = 'pemcell_' + samplename + '.log'
### logfile = open(args.logfile,'w')

logfile = open(logfilename,'w')
if logfile:
    ### print('\nLogging output to ' + args.logfile + '...\n')
    print('\nLogging output to ' + logfilename + '...\n')
else:
    print('Could not open log file!')
    exit()

# print sample name:
printit('Sample: ' + samplename,logfile)

# Calibrate load cell ZERO:
input('Remove PEM cell from the load cell and press Enter')
print('Zeroing load cell...')
try:
    err = LOADCELL.zero(loadcell_num_readings)
    if err:
        raise ValueError(err)
    reading = LOADCELL.get_raw_data_mean(loadcell_num_readings)
    if reading:
        print('Load cell zero value (raw value):',reading)
    else:
        raise ValueError('empty reading')
except ValueError as err:
    print('Could not determine load cell ZERO: ',err)
    exit()

# Calibrate load cell SENSITIVITY:
try:
    M_CAL = float(input('Put full PEM cell without connecting the wires and enter weight (grams): '))
    if M_CAL < 0.0:
         raise ValueError('Full weight must not be negative')
except ValueError:
    print('Invalid input: ',M_CAL)
    exit()

try:
    reading = LOADCELL.get_data_mean(loadcell_num_readings)
    if reading:
        ratio = reading / M_CAL  # calculate the ratio for channel A and gain 128
        print ('calibrated ratio = ' + str(ratio) + ' g/raw-units')
        LOADCELL.set_scale_ratio(ratio)  # set ratio for current channel
        print('Load cell calibration completed.')
    else:
        raise ValueError('Could not read load cell data')
except ValueError as err:
    print('Could not determine load cell SENSITIVITY: ',err)
    exit()

# ask user to attach wires to the PSUs (which will take off some of the weight/load):
input('Attach wires from PEM and cooler top to power supplies, then press ENTER!')
try:
    M_FULL = LOADCELL.get_weight_mean_compensated(loadcell_num_readings)
    if M_FULL:
        print ('Full weight with wires connected = ' + str(M_FULL) + ' g')
    else:
        raise ValueError('could not read load cell')
except ValueError as err:
    print('Could not determine full weight with PSU wires connected: ',err)
    exit()

# ask user for amount of sample water in PEM cell:
try:
    MW_ini = float(input('Enter amount of water in PEM cell (grams): '))
    if MW_ini <= 0.0:
        raise ValueError('water weight must be positive')
except ValueError as err:
    print('Invalid input: ',err)
    exit()

# parse and print cell config:
MW_target = float(config['LOADCELL']['WATER_TARGET'])
I_min  = float(config['PEMCELLPSU']['MINCURRENT'])
I_max  = float(config['PEMCELLPSU']['MAXCURRENT'])
U_max  = float(config['PEMCELLPSU']['MAXVOLTAGE'])
T_ramp = float(config['PEMCELLPSU']['RAMPTIME'])
printit('Max. cell voltage = ' + str(U_max) + ' V',logfile)
printit('Min. cell current = ' + str(I_min) + ' A',logfile)
printit('Max. cell current = ' + str(I_max) + ' A',logfile)
printit('Ramp time = ' + str(T_ramp/60) + ' min',logfile)
printit('Processing start = %.1f g of water' % MW_ini ,logfile)
printit('Processing target = %.1f g of water' % MW_target ,logfile)

# ask if ready for electrolysis run:
input('Ready for electrolysis? Press ENTER to start or CTRL-C to abort...')

# init variables:
Q  = 0.0 # total charge in 'Ampere-hours'
t0 = time.time() # start time
t2 = t0
I = I_min
I_last = I_min
tt = 0; # processing time (not including pause time)

# start electrolysis (set output voltage and current):
print('')
printit('Starting electrolysis (press ENTER to pause)...',logfile)
PSU.voltage(U_max)
PSU.current(I_min)
PSU.output(True)

# Monitor current and voltage:
do_doop = True
BUTTON = []
_thread.start_new_thread(wait_ENTER, (BUTTON,'Stopping electrolysis...'))

do_process = True
current_on = True

while do_process:

    # while current is turned on (sample processing is not paused):
    if current_on:

        # pause between two readings:
        t1 = t2
        time.sleep(10)

        # stop the loop if user pressed ENTER:
        if BUTTON:
            current_on = False

        # read current and voltage at PSU terminals:
        r = PSU.reading();

        # voltage at PSU terminals:
        UC = r[0];

        # current from PSU
        IC = r[1];

        # water amount left:
        MW = MW_ini - (M_FULL - LOADCELL.get_weight_mean_compensated(loadcell_num_readings))

	# timing:
        t2 = time.time()
        tt = tt + t2-t1; # add to processing time

        # cumulative current (charge, in Ah):
        Q = Q + IC*(t2-t1)/3600

	# estimate processing time left:
        if MW < MW_ini:
                rate = (MW_ini-MW) / tt		# rate of H2O removal from cell (g/s)
                tl = (MW-MW_target) / rate	# time left to arrive at target mass (in seconds)
                if tl > 3600*24:
                	# days
                	tl = tl / 3600 / 24
                	tl_unit = 'd'
                elif tl > 3600:
                	# hours
                	tl = tl / 3600
                	tl_unit = 'h'
                elif tl > 60:
                	# minutes
                	tl = tl / 60
                	tl_unit = 'min'
                else:
                	# seconds
                	tl_unit = 's'

        else:
                # MW is >= MW_ini (for instance due to noisy readings at the beginning of the process)
                tl = float('nan');
                tl_unit = '?'
	
        # show data:
        printit("{:>.1f}...{:>.1f} s:\t cell voltage: {:>.2f} V\tcell current: {:>.2f} A\ttotal charge: {:>.2E} Ah\tWater left: {:>.1f} g ({:>.1f}%)\tTime left: {:>.2f} {}".format(t1-t0 , t2-t0 , UC, IC , Q, MW , MW/MW_ini*100, tl , tl_unit),logfile)

        if MW <= MW_target:
            current_on = 0
            printit ('*** Water mass target reached! Press ENTER...',logfile)
            wait_ENTER_msg = ''

        # calculate and set current limit:
        if t2-t0 < T_ramp:
            I = I_min + (I_max-I_min) * (t2-t0)/T_ramp;
        else:
            I = I_max

        if I != I_last:
            PSU.current(I)
            I_last = I

    # if processing is paused:
    else:
        
        printit('Turning off power supply...',logfile)

        # turn off current at PSU:
        PSU.current(0.0)

        # ask user what to do next:
        u = ''
        print('')
        while u not in ['X','C']:
            u = input('Electrolysis paused. Enter C to continue processing the sample or X to exit.').upper()
        
        print('')
        if u == 'X':
            do_process = False
        else:
            printit('Turning on power supply...',logfile)
            PSU.current(I)
            current_on = True
            I_last = I
            t2 = time.time()
            BUTTON = []
            _thread.start_new_thread(wait_ENTER, (BUTTON,'Stopping electrolysis...'))


# turn off PSU:
# printit('Turning off power supply...',logfile)
# PSU.current(0.0)
PSU.output(False)
GPIO.cleanup()
printit('Done.',logfile)
